{"ast":null,"code":"var _jsxFileName = \"/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js\",\n  _s = $RefreshSig$();\nimport { useState, useEffect, useCallback } from \"react\";\nimport api from '../api';\nimport CommentForm from './CommentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostItem = ({\n  post\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n\n  // Fetch comments specific to this post\n  const fetchComments = useCallback(async () => {\n    if (!post || !post.id) return;\n    try {\n      const response = await api.get(`/comments?postId=${post.id}`);\n      setComments(response.data);\n    } catch (error) {\n      console.error(`Error fetching comments for post ${post.id}:`, error);\n    }\n  }, [post]);\n  useEffect(() => {\n    fetchComments();\n  }, [fetchComments]);\n\n  // Add new comment to the specific post without refreshing\n  const handleNewComment = newComment => {\n    if (newComment.postId === post.id) {\n      setComments(prevComments => [...prevComments, newComment]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '2rem',\n      borderBottom: '1px solid #ccc',\n      paddingBottom: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 34,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 36,\n      columnNumber: 7\n    }, this), comments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No comments yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 9\n    }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '0.5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [comment.username, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 42,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 43,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 41,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: post.id,\n      onCommentSubmitted: handleNewComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 32,\n    columnNumber: 5\n  }, this);\n};\n_s(PostItem, \"X/fDkkFa0j746uTD/Tm/yMG5ez8=\");\n_c = PostItem;\nexport default PostItem;\nvar _c;\n$RefreshReg$(_c, \"PostItem\");","map":{"version":3,"names":["useState","useEffect","useCallback","api","CommentForm","jsxDEV","_jsxDEV","PostItem","post","_s","comments","setComments","fetchComments","id","response","get","data","error","console","handleNewComment","newComment","postId","prevComments","style","marginBottom","borderBottom","paddingBottom","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","length","map","comment","username","onCommentSubmitted","_c","$RefreshReg$"],"sources":["/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js"],"sourcesContent":["import { useState, useEffect, useCallback } from \"react\";\nimport api from '../api';\nimport CommentForm from './CommentForm';\n\nconst PostItem = ({ post }) => {\n  const [comments, setComments] = useState([]);\n\n  // Fetch comments specific to this post\n  const fetchComments = useCallback(async () => {\n    if (!post || !post.id) return;\n\n    try {\n      const response = await api.get(`/comments?postId=${post.id}`);\n      setComments(response.data);\n    } catch (error) {\n      console.error(`Error fetching comments for post ${post.id}:`, error);\n    }\n  }, [post]);\n\n  useEffect(() => {\n    fetchComments();\n  }, [fetchComments]);\n\n  // Add new comment to the specific post without refreshing\n  const handleNewComment = (newComment) => {\n    if (newComment.postId === post.id) {\n      setComments((prevComments) => [...prevComments, newComment]);\n    }\n  };\n\n  return (\n    <div style={{ marginBottom: '2rem', borderBottom: '1px solid #ccc', paddingBottom: '1rem' }}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n\n      <h4>Comments:</h4>\n      {comments.length === 0 ? (\n        <p>No comments yet.</p>\n      ) : (\n        comments.map((comment) => (\n          <div key={comment.id} style={{ marginBottom: '0.5rem' }}>\n            <strong>{comment.username}:</strong>\n            <p>{comment.content}</p>\n          </div>\n        ))\n      )}\n\n      <CommentForm postId={post.id} onCommentSubmitted={handleNewComment} />\n    </div>\n  );\n};\n\nexport default PostItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}