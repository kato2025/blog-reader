{"ast":null,"code":"var _jsxFileName = \"/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport api from '../api';\nimport CommentForm from './CommentForm';\nimport { jsxDEV as _jsxDEV, Fragment as _Fragment } from \"react/jsx-dev-runtime\";\nconst PostItem = ({\n  post\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    if (!post || !post.id) return;\n    const fetchComments = async () => {\n      try {\n        const response = await api.get(`/comments?postId=${post.id}`); // ✅ Fetch only comments for this post\n        setComments(response.data);\n      } catch (error) {\n        console.error(`Error fetching comments for post ${post.id}:`, error);\n      }\n    };\n    fetchComments();\n  }, [post]);\n\n  // ✅ Only add comments belonging to this post\n  const handleNewComment = newComment => {\n    if (newComment.postId === post.id) {\n      setComments(prevComments => [...prevComments, newComment]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '2rem',\n      borderBottom: '1px solid #ccc',\n      paddingBottom: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 32,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 33,\n      columnNumber: 7\n    }, this), comments.length > 0 && /*#__PURE__*/_jsxDEV(_Fragment, {\n      children: [/*#__PURE__*/_jsxDEV(\"h4\", {\n        children: \"Comments:\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 38,\n        columnNumber: 11\n      }, this), comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n        style: {\n          marginBottom: '0.5rem'\n        },\n        children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n          children: [comment.username, \":\"]\n        }, void 0, true, {\n          fileName: _jsxFileName,\n          lineNumber: 41,\n          columnNumber: 15\n        }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n          children: comment.content\n        }, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 42,\n          columnNumber: 15\n        }, this)]\n      }, comment.id, true, {\n        fileName: _jsxFileName,\n        lineNumber: 40,\n        columnNumber: 13\n      }, this))]\n    }, void 0, true), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: post.id,\n      onCommentSubmitted: handleNewComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 49,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 31,\n    columnNumber: 5\n  }, this);\n};\n_s(PostItem, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = PostItem;\nexport default PostItem;\nvar _c;\n$RefreshReg$(_c, \"PostItem\");","map":{"version":3,"names":["React","useEffect","useState","api","CommentForm","jsxDEV","_jsxDEV","Fragment","_Fragment","PostItem","post","_s","comments","setComments","id","fetchComments","response","get","data","error","console","handleNewComment","newComment","postId","prevComments","style","marginBottom","borderBottom","paddingBottom","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","length","map","comment","username","onCommentSubmitted","_c","$RefreshReg$"],"sources":["/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport api from '../api';\nimport CommentForm from './CommentForm';\n\nconst PostItem = ({ post }) => {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    if (!post || !post.id) return;\n\n    const fetchComments = async () => {\n      try {\n        const response = await api.get(`/comments?postId=${post.id}`); // ✅ Fetch only comments for this post\n        setComments(response.data);\n      } catch (error) {\n        console.error(`Error fetching comments for post ${post.id}:`, error);\n      }\n    };\n\n    fetchComments();\n  }, [post]);\n\n  // ✅ Only add comments belonging to this post\n  const handleNewComment = (newComment) => {\n    if (newComment.postId === post.id) {\n      setComments((prevComments) => [...prevComments, newComment]);\n    }\n  };\n\n  return (\n    <div style={{ marginBottom: '2rem', borderBottom: '1px solid #ccc', paddingBottom: '1rem' }}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n\n      {/* Only show comments section if there are comments */}\n      {comments.length > 0 && (\n        <>\n          <h4>Comments:</h4>\n          {comments.map((comment) => (\n            <div key={comment.id} style={{ marginBottom: '0.5rem' }}>\n              <strong>{comment.username}:</strong>\n              <p>{comment.content}</p>\n            </div>\n          ))}\n        </>\n      )}\n\n      {/* Add a comment */}\n      <CommentForm postId={post.id} onCommentSubmitted={handleNewComment} />\n    </div>\n  );\n};\n\nexport default PostItem;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,GAAG,MAAM,QAAQ;AACxB,OAAOC,WAAW,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA,EAAAC,QAAA,IAAAC,SAAA;AAExC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAK,CAAC,KAAK;EAAAC,EAAA;EAC7B,MAAM,CAACC,QAAQ,EAAEC,WAAW,CAAC,GAAGX,QAAQ,CAAC,EAAE,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACd,IAAI,CAACS,IAAI,IAAI,CAACA,IAAI,CAACI,EAAE,EAAE;IAEvB,MAAMC,aAAa,GAAG,MAAAA,CAAA,KAAY;MAChC,IAAI;QACF,MAAMC,QAAQ,GAAG,MAAMb,GAAG,CAACc,GAAG,CAAC,oBAAoBP,IAAI,CAACI,EAAE,EAAE,CAAC,CAAC,CAAC;QAC/DD,WAAW,CAACG,QAAQ,CAACE,IAAI,CAAC;MAC5B,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdC,OAAO,CAACD,KAAK,CAAC,oCAAoCT,IAAI,CAACI,EAAE,GAAG,EAAEK,KAAK,CAAC;MACtE;IACF,CAAC;IAEDJ,aAAa,CAAC,CAAC;EACjB,CAAC,EAAE,CAACL,IAAI,CAAC,CAAC;;EAEV;EACA,MAAMW,gBAAgB,GAAIC,UAAU,IAAK;IACvC,IAAIA,UAAU,CAACC,MAAM,KAAKb,IAAI,CAACI,EAAE,EAAE;MACjCD,WAAW,CAAEW,YAAY,IAAK,CAAC,GAAGA,YAAY,EAAEF,UAAU,CAAC,CAAC;IAC9D;EACF,CAAC;EAED,oBACEhB,OAAA;IAAKmB,KAAK,EAAE;MAAEC,YAAY,EAAE,MAAM;MAAEC,YAAY,EAAE,gBAAgB;MAAEC,aAAa,EAAE;IAAO,CAAE;IAAAC,QAAA,gBAC1FvB,OAAA;MAAAuB,QAAA,EAAKnB,IAAI,CAACoB;IAAK;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eACrB5B,OAAA;MAAAuB,QAAA,EAAInB,IAAI,CAACyB;IAAO;MAAAJ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAI,CAAC,EAGpBtB,QAAQ,CAACwB,MAAM,GAAG,CAAC,iBAClB9B,OAAA,CAAAE,SAAA;MAAAqB,QAAA,gBACEvB,OAAA;QAAAuB,QAAA,EAAI;MAAS;QAAAE,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,EACjBtB,QAAQ,CAACyB,GAAG,CAAEC,OAAO,iBACpBhC,OAAA;QAAsBmB,KAAK,EAAE;UAAEC,YAAY,EAAE;QAAS,CAAE;QAAAG,QAAA,gBACtDvB,OAAA;UAAAuB,QAAA,GAASS,OAAO,CAACC,QAAQ,EAAC,GAAC;QAAA;UAAAR,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAQ,CAAC,eACpC5B,OAAA;UAAAuB,QAAA,EAAIS,OAAO,CAACH;QAAO;UAAAJ,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAI,CAAC;MAAA,GAFhBI,OAAO,CAACxB,EAAE;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAGf,CACN,CAAC;IAAA,eACF,CACH,eAGD5B,OAAA,CAACF,WAAW;MAACmB,MAAM,EAAEb,IAAI,CAACI,EAAG;MAAC0B,kBAAkB,EAAEnB;IAAiB;MAAAU,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACnE,CAAC;AAEV,CAAC;AAACvB,EAAA,CA/CIF,QAAQ;AAAAgC,EAAA,GAARhC,QAAQ;AAiDd,eAAeA,QAAQ;AAAC,IAAAgC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}