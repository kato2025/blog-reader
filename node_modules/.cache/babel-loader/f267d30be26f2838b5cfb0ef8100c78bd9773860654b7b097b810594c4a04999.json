{"ast":null,"code":"var _jsxFileName = \"/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport api from '../api';\nimport CommentForm from './CommentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\nconst PostItem = ({\n  post\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    if (!post || !post.id) return;\n    const fetchComments = async () => {\n      try {\n        // Fetch all comments from the endpoint\n        const response = await axios.get(`${API_BASE_URL}/comments`);\n        // Filter only the comments that belong to the current post\n        const postComments = response.data.filter(comment => comment.postId === post);\n        setComments(postComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n    fetchComments();\n  }, [post]);\n\n  // Add new comment to the specific post without refreshing\n  const handleNewComment = newComment => {\n    if (newComment.postId === post.id) {\n      setComments(prevComments => [...prevComments, newComment]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '2rem',\n      borderBottom: '1px solid #ccc',\n      paddingBottom: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 37,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 38,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 40,\n      columnNumber: 7\n    }, this), comments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No comments yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 42,\n      columnNumber: 9\n    }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '0.5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [comment.username, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 46,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 47,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 45,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: post.id,\n      onCommentSubmitted: handleNewComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 52,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(PostItem, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = PostItem;\nexport default PostItem;\nvar _c;\n$RefreshReg$(_c, \"PostItem\");","map":{"version":3,"names":["React","useEffect","useState","axios","api","CommentForm","jsxDEV","_jsxDEV","API_BASE_URL","process","env","REACT_APP_API_BASE_URL","PostItem","post","_s","comments","setComments","id","fetchComments","response","get","postComments","data","filter","comment","postId","error","console","handleNewComment","newComment","prevComments","style","marginBottom","borderBottom","paddingBottom","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","length","map","username","onCommentSubmitted","_c","$RefreshReg$"],"sources":["/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport axios from 'axios';\nimport api from '../api';\nimport CommentForm from './CommentForm';\nconst API_BASE_URL = process.env.REACT_APP_API_BASE_URL;\n\nconst PostItem = ({ post }) => {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    if (!post || !post.id) return;\n\n    const fetchComments = async () => {\n      try {\n        // Fetch all comments from the endpoint\n        const response = await axios.get(`${API_BASE_URL}/comments`);\n        // Filter only the comments that belong to the current post\n        const postComments = response.data.filter(comment => comment.postId === post);\n        setComments(postComments);\n      } catch (error) {\n        console.error('Error fetching comments:', error);\n      }\n    };\n\n    fetchComments();\n  }, [post]);\n\n  // Add new comment to the specific post without refreshing\n  const handleNewComment = (newComment) => {\n    if (newComment.postId === post.id) {\n      setComments((prevComments) => [...prevComments, newComment]);\n    }\n  };\n\n  return (\n    <div style={{ marginBottom: '2rem', borderBottom: '1px solid #ccc', paddingBottom: '1rem' }}>\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n\n      <h4>Comments:</h4>\n      {comments.length === 0 ? (\n        <p>No comments yet.</p>\n      ) : (\n        comments.map((comment) => (\n          <div key={comment.id} style={{ marginBottom: '0.5rem' }}>\n            <strong>{comment.username}:</strong>\n            <p>{comment.content}</p>\n          </div>\n        ))\n      )}\n\n      <CommentForm postId={post.id} onCommentSubmitted={handleNewComment} />\n    </div>\n  );\n};\n\nexport default PostItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}