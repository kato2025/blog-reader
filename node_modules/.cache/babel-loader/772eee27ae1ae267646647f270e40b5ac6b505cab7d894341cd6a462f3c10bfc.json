{"ast":null,"code":"var _jsxFileName = \"/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport api from '../api';\nimport CommentForm from './CommentForm';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst PostItem = ({\n  post\n}) => {\n  _s();\n  const [comments, setComments] = useState([]);\n  useEffect(() => {\n    if (!post || !post.id) return;\n    const fetchComments = async () => {\n      try {\n        // If your API doesn't support filtering by query param,\n        // fetch all comments and filter client-side.\n        const response = await api.get('/comments');\n        const postComments = response.data.filter(comment => comment.postId === post.id);\n        setComments(postComments);\n      } catch (error) {\n        console.error(`Error fetching comments for post ${post.id}:`, error);\n      }\n    };\n    fetchComments();\n  }, [post.id]); // Depend on post.id directly\n\n  // Add new comment to the specific post without refreshing\n  const handleNewComment = newComment => {\n    if (newComment.postId === post.id) {\n      setComments(prevComments => [...prevComments, newComment]);\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      marginBottom: '2rem',\n      borderBottom: '1px solid #ccc',\n      paddingBottom: '1rem'\n    },\n    children: [/*#__PURE__*/_jsxDEV(\"h3\", {\n      children: post.title\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n      children: post.content\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h4\", {\n      children: \"Comments:\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 46,\n      columnNumber: 7\n    }, this), comments.length === 0 ? /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"No comments yet.\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this) : comments.map(comment => /*#__PURE__*/_jsxDEV(\"div\", {\n      style: {\n        marginBottom: '0.5rem'\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"strong\", {\n        children: [comment.username, \":\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 52,\n        columnNumber: 13\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: comment.content\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 53,\n        columnNumber: 13\n      }, this)]\n    }, comment.id, true, {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 11\n    }, this)), /*#__PURE__*/_jsxDEV(CommentForm, {\n      postId: post.id,\n      onCommentSubmitted: handleNewComment\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 58,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 36,\n    columnNumber: 5\n  }, this);\n};\n_s(PostItem, \"ByfV/t0DOiJY0nGyfgV+6QjIggQ=\");\n_c = PostItem;\nexport default PostItem;\nvar _c;\n$RefreshReg$(_c, \"PostItem\");","map":{"version":3,"names":["React","useEffect","useState","api","CommentForm","jsxDEV","_jsxDEV","PostItem","post","_s","comments","setComments","id","fetchComments","response","get","postComments","data","filter","comment","postId","error","console","handleNewComment","newComment","prevComments","style","marginBottom","borderBottom","paddingBottom","children","title","fileName","_jsxFileName","lineNumber","columnNumber","content","length","map","username","onCommentSubmitted","_c","$RefreshReg$"],"sources":["/Users/drnamuene/Documents/Training/Odin Project/Notes/Node/Projects/blog_app/blog-reader/src/components/PostItem.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\nimport api from '../api';\nimport CommentForm from './CommentForm';\n\nconst PostItem = ({ post }) => {\n  const [comments, setComments] = useState([]);\n\n  useEffect(() => {\n    if (!post || !post.id) return;\n\n    const fetchComments = async () => {\n      try {\n        // If your API doesn't support filtering by query param,\n        // fetch all comments and filter client-side.\n        const response = await api.get('/comments');\n        const postComments = response.data.filter(\n          (comment) => comment.postId === post.id\n        );\n        setComments(postComments);\n      } catch (error) {\n        console.error(`Error fetching comments for post ${post.id}:`, error);\n      }\n    };\n\n    fetchComments();\n  }, [post.id]); // Depend on post.id directly\n\n  // Add new comment to the specific post without refreshing\n  const handleNewComment = (newComment) => {\n    if (newComment.postId === post.id) {\n      setComments((prevComments) => [...prevComments, newComment]);\n    }\n  };\n\n  return (\n    <div\n      style={{\n        marginBottom: '2rem',\n        borderBottom: '1px solid #ccc',\n        paddingBottom: '1rem'\n      }}\n    >\n      <h3>{post.title}</h3>\n      <p>{post.content}</p>\n\n      <h4>Comments:</h4>\n      {comments.length === 0 ? (\n        <p>No comments yet.</p>\n      ) : (\n        comments.map((comment) => (\n          <div key={comment.id} style={{ marginBottom: '0.5rem' }}>\n            <strong>{comment.username}:</strong>\n            <p>{comment.content}</p>\n          </div>\n        ))\n      )}\n\n      <CommentForm postId={post.id} onCommentSubmitted={handleNewComment} />\n    </div>\n  );\n};\n\nexport default PostItem;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}